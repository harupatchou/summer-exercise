# hibernate-validator default messages
# https://github.com/hibernate/hibernate-validator/blob/master/engine/src/main/resources/org/hibernate/validator/ValidationMessages.properties
# made this site to reference
# https://github.com/onBass-naga/spring-boot-samples/blob/master/simple-mvc-app/src/main/resources/i18n/messages.properties
#javax.validation.constraints.AssertFalse.message = must be false
#javax.validation.constraints.AssertTrue.message = must be true
#javax.validation.constraints.DecimalMax.message = must be less than ${inclusive == true ? 'or equal to ' : ''}{value}
#javax.validation.constraints.DecimalMin.message = must be greater than ${inclusive == true ? 'or equal to ' : ''}{value}
#javax.validation.constraints.Digits.message = numeric value out of bounds (<{integer} digits>.<{fraction} digits> expected)
#javax.validation.constraints.Future.message = must be in the future
javax.validation.constraints.Max.message = {value}\u3088\u308a\u5927\u304d\u3044\u5024\u306f\u6307\u5b9a\u51fa\u6765\u307e\u305b\u3093
javax.validation.constraints.Min.message = {value}\u3088\u308a\u5c0f\u3055\u3044\u5024\u306f\u6307\u5b9a\u51fa\u6765\u307e\u305b\u3093
javax.validation.constraints.NotNull.message = \u5165\u529b\u5fc5\u9808\u9805\u76ee\u3067\u3059
#javax.validation.constraints.Null.message = must be null
#javax.validation.constraints.Past.message = must be in the past
#javax.validation.constraints.Pattern.message = must match "{regexp}"
javax.validation.constraints.Size.message = {min}\u301c{max}\u6587\u5b57\u3067\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044
#org.hibernate.validator.constraints.CreditCardNumber.message = invalid credit card number
#org.hibernate.validator.constraints.EAN.message = invalid {type} barcode
org.hibernate.validator.constraints.Email.message = \u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306e\u5f62\u5f0f\u304c\u4e0d\u6b63\u3067\u3059
#org.hibernate.validator.constraints.Length.message = length must be between {min} and {max}
#org.hibernate.validator.constraints.LuhnCheck.message = The check digit for ${validatedValue} is invalid, Luhn Modulo 10 checksum failed
#org.hibernate.validator.constraints.Mod10Check.message = The check digit for ${validatedValue} is invalid, Modulo 10 checksum failed
#org.hibernate.validator.constraints.Mod11Check.message = The check digit for ${validatedValue} is invalid, Modulo 11 checksum failed
#org.hibernate.validator.constraints.ModCheck.message = The check digit for ${validatedValue} is invalid, ${modType} checksum failed
org.hibernate.validator.constraints.NotBlank.message = \u5165\u529b\u5fc5\u9808\u9805\u76ee\u3067\u3059
#org.hibernate.validator.constraints.NotEmpty.message = may not be empty
#org.hibernate.validator.constraints.ParametersScriptAssert.message = script expression "{script}" didn't evaluate to true
#org.hibernate.validator.constraints.Range.message = must be between {min} and {max}
#org.hibernate.validator.constraints.SafeHtml.message = may have unsafe html content
#org.hibernate.validator.constraints.ScriptAssert.message = script expression "{script}" didn't evaluate to true
#org.hibernate.validator.constraints.URL.message = must be a valid URL
#org.hibernate.validator.constraints.br.CNPJ.message = invalid Brazilian corporate taxpayer registry number (CNPJ)
#org.hibernate.validator.constraints.br.CPF.message = invalid Brazilian individual taxpayer registry number (CPF)
#org.hibernate.validator.constraints.br.TituloEleitoral.message = invalid Brazilian Voter ID card number

# typemismatch

typeMismatch="{0}"\u3092\u9078\u3073\u76f4\u3057\u3066\u304f\u3060\u3055\u3044
typeMismatch.int="{0}"\u306b\u306f\u6570\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044
typeMismatch.double="{0}"\u306b\u306f\u6570\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044
typeMismatch.float="{0}"\u306b\u306f\u6570\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044
typeMismatch.long="{0}"\u306b\u306f\u6570\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044
typeMismatch.short="{0}"\u306b\u306f\u6570\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044
typeMismatch.java.lang.Integer="{0}"\u306b\u306f\u6570\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044
typeMismatch.java.lang.Double="{0}"\u306b\u306f\u6570\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044
typeMismatch.java.lang.Float="{0}"\u306b\u306f\u6570\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044
typeMismatch.java.lang.Long="{0}"\u306b\u306f\u6570\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044
typeMismatch.java.lang.Short="{0}"\u306b\u306f\u6570\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044
typeMismatch.java.util.Date="{0}"\u306b\u306f\u6307\u5b9a\u3055\u308c\u305f\u5f62\u5f0f\u3067\u65e5\u4ed8\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044

# filed names
stock = \u5728\u5eab\u6570